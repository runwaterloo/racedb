---
- name: create required directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  with_items:
    - "{{ dirs_to_create }}"
  tags:
    - django_docker
    - persistent

#- name: check if {{ mysql_backup_path }}/{{ app }}.sql exists
#  stat:
#    path: "{{ mysql_backup_path }}/{{ app }}.sql"
#  register: sql_file
#  tags:
#    - django_docker
#    - persistent

#- name: restore mysql backup from S3
#  aws_s3:
#    bucket: "{{ s3_bucket }}"
#    object: "{{ mysql_object_to_restore }}"
#    dest: "{{ mysql_backup_path }}/{{ app }}.sql.gz"
#    mode: get
#  when: not sql_file.stat.exists and ansible_host != "paris"
#  tags:
#    - django_docker
#    - persistent

#- name: gunzip mysql backup
#  shell: gunzip "{{ mysql_backup_path }}/{{ app }}.sql.gz"
#  args:
#    creates: "{{ mysql_backup_path }}/{{ app }}.sql"
#  tags:
#    - django_docker
#    - persistent

- name: check if {{ certbot_conf_path }}/accounts exists
  stat:
    path: "{{ certbot_conf_path }}/accounts"
  register: certbot_accounts
  tags:
    - django_docker
    - persistent

- name: restore certbot configuration from S3
  aws_s3:
    bucket: "{{ s3_bucket }}"
    object: "{{ certbot_object_to_restore }}"
    dest: "/tmp/{{ app }}.certbot.tar.gz"
    mode: get
  when: not certbot_accounts.stat.exists and isprod == "true"
  tags:
    - django_docker
    - persistent

- name: unarchive certbot configuration
  unarchive:
    src: "/tmp/{{ app }}.certbot.tar.gz"
    dest: "{{ certbot_conf_path }}"
    remote_src: yes
  when: not certbot_accounts.stat.exists and isprod == "true"
  tags:
    - django_docker
    - persistent

- name: ensure no certbot config is in /tmp
  file:
    path: "/tmp/{{ app }}.certbot.tar.gz"
    state: absent
  tags:
    - django_docker
    - persistent

- name: deploy nginx configuration
  template:
    src: app.conf.j2
    dest: "{{ nginx_path }}/app.conf"
    owner: root
    group: root
    mode: "0644"
  tags:
    - django_docker
    - persistent

#- name: put django-compose secrets in place
#  copy:
#    dest: "{{ secrets_path }}/{{ item.dest }}"
#    content: "{{ item.secret }}"
#  with_items:
#    - { 'dest': 'MYSQL_ROOT_PASSWORD_FILE', 'secret': "{{ mysql_root_password }}\n" }
#    - { 'dest': 'MYSQL_PASSWORD_FILE', 'secret': "{{ db_password }}\n" }
#  no_log: yes
#  tags:
#    - django_docker
#    - persistent
#    - secrets
