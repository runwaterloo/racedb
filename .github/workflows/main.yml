name: Main Pipeline

permissions:
  checks: write
  contents: write
  packages: write

on:
  push:
    branches:
      - main

jobs:
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Prepare secrets file
        run: cp racedb/secrets.py.sample racedb/secrets.py

      - name: Remove mysqlclient from requirements.txt
        run: sed -i '/^mysqlclient/d' requirements/requirements.txt

      - name: Install test requirements
        run: pip install --root-user-action=ignore -r requirements/requirements-test.txt

      - name: Run tests with coverage
        run: pytest --junitxml=report.xml --cov=racedbapp --cov-report=xml --cov-branch

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        with:
          name: Test results
          path: report.xml
          reporter: java-junit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          disable_comment: true

  build_and_push:
    name: Build and Push Docker Image
    if: "!contains(github.event.head_commit.message, '[skip build]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set short SHA variable
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/racedb:${{ env.SHORT_SHA }}

      - name: Set and show version number
        run: |
          RUN_NUMBER=${{ github.run_number }}
          MAJOR=$(((RUN_NUMBER / 1000) + 3))
          MINOR=$(TZ=America/Toronto date +'%y%m%d')
          PATCH=$((RUN_NUMBER % 1000))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Calculated VERSION: $VERSION"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Tag and push Docker image with VERSION
        run: |
          docker tag ghcr.io/${{ github.repository_owner }}/racedb:${{ env.SHORT_SHA }} ghcr.io/${{ github.repository_owner }}/racedb:${{ env.VERSION }}
          docker push ghcr.io/${{ github.repository_owner }}/racedb:${{ env.VERSION }}

      - name: Save VERSION as artifact
        run: echo "${VERSION}" > version.txt

      - name: Upload VERSION artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  tag_commit:
    name: Tag Commit
    needs: [unit_tests, build_and_push]
    if: ${{ needs.unit_tests.result == 'success' && needs.build_and_push.result == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Read version
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Tag commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $VERSION
          git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    name: Create GitHub Release
    needs: tag_commit
    if: ${{ needs.tag_commit.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Generate release notes
        id: release_notes
        run: |
          # Find the previous tag reachable from HEAD, ignoring the current tag
          PREV_TAG=$(git describe --tags --abbrev=0 --match "v*" ${{ needs.tag_commit.outputs.VERSION }}^)

          # Get commit messages between previous tag and current tag, one per line
          NOTES=$(git log $PREV_TAG..${{ needs.tag_commit.outputs.VERSION }} --pretty=format:'- %h: %s (%an)')

          # If no previous tag (e.g. first release), just list commits in current tag
          if [ -z "$NOTES" ]; then
            NOTES=$(git log -1 --pretty=format:'- %h: %s (%an)' ${{ needs.tag_commit.outputs.VERSION }})
          fi

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.tag_commit.outputs.VERSION }}
          name: ${{ needs.tag_commit.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.release_body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
